GENERIC POINTER- DONT HAVE ANY RETURN TYPE

REFERENCE[&]: RETURNS THE ADDRESS OF GIVEN POINTER
DE-REFERENCE[*]: RETURNS THE VALUE AT GIVEN ADDRESS

NULL POINTER: INITIALIZE WITH nullptr
              GOOD PRACTICE TO INITIALIZE POINTER WITH NULL TO AVOID WILD POINTER

VOID POINTER: POINTER DEFINE USING VOID KEYWORD
              SYNTAX->  void *ptr_name = NULL;
              GENERIC POINTER

DANGLING POINTER: WHICH INDICATE MEMORY WHICH IS DEALLOCATED MEMORY

CONSTANT POINTER: DEFINED USING const KEYWORD (SAME AS CONSTANT VARIABLE)
                  SYNTAX-> const data_type *ptr_name = &variable_name;

POINTER OF POINTER(DOUBLE POINTER): USED TO STORE ADDRESS OF POINTER
                                    SYNTAX-> data_type ** pointer_name = & another_pointer_name;

POINTER TO FUNCTION: POINTER WHICH INDICATE ADDRESS OF FUNCTION
